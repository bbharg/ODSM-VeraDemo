# File: azure-pipeline.yml

# ASP.NET Core (.NET Framework)
# Build and test ASP.NET Core projects targeting the full .NET Framework.
# Add steps that publish symbols, save build artifacts, and more:
# https://docs.microsoft.com/azure/devops/pipelines/languages/dotnet-core

# Scheduled Hourly Builds of master branch
schedules:
- cron: 0 0-23/1 * * * # cron syntax defining a schedule
  displayName: Daily Build # friendly name given to a specific schedule
  branches:
    include: [ master ] # which branches the schedule applies to
    #exclude: [ string ] # which branches to exclude from the schedule
  always: always # whether to always run the pipeline or only if there have been source code changes since the last successful scheduled run. The default is false.schedules:

variables:
  solution: '**/*.sln'
  buildPlatform: 'Any CPU'
  buildConfiguration: 'Release'
  buildDebugConfiguration: 'Debug'

trigger: none
# - master

pool:
  vmImage: 'windows-latest'

stages: 
- stage: Build
        
  jobs:
  - job: Release_Build
    displayName: Release Build
  
    steps:
    - task: NuGetToolInstaller@1
  
    - task: NuGetCommand@2
      inputs:
          restoreSolution: '$(solution)'

    - task: VSBuild@1
      inputs:
           solution: '$(solution)'
           msbuildArgs: '/p:DeployOnBuild=true /p:WebPublishMethod=Package /p:PackageAsSingleFile=true /p:SkipInvalidConfigurations=true /p:DesktopBuildPackageLocation="$(build.artifactStagingDirectory)\WebApp.zip" /p:DeployIisAppPath="Default Web Site"'
           platform: '$(buildPlatform)'
           configuration: '$(buildConfiguration)'

    - task: PublishPipelineArtifact@1
      inputs:
            targetPath: $(Build.StagingDirectory)\WebApp.zip  #$(System.DefaultWorkingDirectory)/bin/WebApp
            artifactName: Release_WebApp

  - job: Debug_Build
    displayName: Debug Build
  
    steps:
    - task: NuGetToolInstaller@1
  
    - task: NuGetCommand@2
      inputs:
          restoreSolution: '$(solution)'

    - task: VSBuild@1
      inputs:
           solution: '$(solution)'
           msbuildArgs: '/p:DeployOnBuild=true /p:WebPublishMethod=Package /p:PackageAsSingleFile=true /p:SkipInvalidConfigurations=true /p:DesktopBuildPackageLocation="$(build.artifactStagingDirectory)\WebApp.zip" /p:DeployIisAppPath="Default Web Site"'
           platform: '$(buildPlatform)'
           configuration: '$(buildDebugConfiguration)'

    - task: PublishPipelineArtifact@1
      inputs:
            targetPath: $(Build.StagingDirectory)\WebApp.zip  #$(System.DefaultWorkingDirectory)/bin/WebApp
            artifactName: Debug_WebApp

    
# Testing Stage of CI/CD Pipeline
- stage: Testing

  jobs: 
  - job: Unit_Testing
    displayName: Unit Testing
      
    steps: 
     - task: VSTest@2
       inputs:
            platform: '$(buildPlatform)'
            configuration: '$(buildConfiguration)'

- stage: Security_Testing
  jobs:       
  - job: SAST_Security_Testing
    displayName: Static Analysis Security Testing

    steps:
    - task: DownloadPipelineArtifact@2
      inputs:
         artifact: Debug_WebApp

    - task: Veracode@3
      inputs:
        ConnectionDetailsSelection: 'Endpoint'
        AnalysisService: 'Veracode SaaS Connection'
        # apiId: '$(VERACODE_ID)'
        # apiKey: '$(VERACODE_KEY)'
        veracodeAppProfile: '$(system.teamProject)'
        version: '$(build.buildNumber)'
        filepath: '$(Pipeline.Workspace)'  #$(build.artifactstagingdirectory)
        sandboxName: 'Development Sandbox'
        failBuildIfUploadAndScanBuildStepFails: true
        importResults: true
        # failBuildOnPolicyFail: true
        maximumWaitTime: '360'

  - job: SCA_Security_Testing
    displayName: Software Componsition Analysis Testing
  
    steps:
    - bash: echo 'SCA Testing'
    - bash: echo 'Downloading Project'
    
# Deployment Stage of CI/CD Pipeline
- stage: Deployment

  jobs:
   - job: Release_Deployment
     displayName: Release Deployment
   
     steps:
     - bash: echo 'Release Deployed'